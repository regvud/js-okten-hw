use test_table

db.cars.insertOne(
    {model: 'mercedes', year: 2003, status: 'available'}
    )

db.cars.insertMany([
    {model: 'ferrari', year: 2016, status: 'available'},
    {model: 'lexus', year: 2005, status: 'unavailable'}
])

db.cars.find(
    {status: 'available'},
    {status: 1, year: 1, _id: 0}
    )

db.cars.find({_id: ObjectId('649d5815785a0e385331d5f7')})


db.users.insertMany([
    {
        name: 'Alex', age: 25, gender: 'male', address: {
            city: 'Lviv',
            street: 'Chornovola',
            house: 25,
            flat: 12
        },
        parents: [
            'Vasia',
            'Masha',
        ],
        rating: 5,
        studying: ['js', 'java']
    },
    {
        name: 'Natalii', age: 29, gender: 'female', address: {
            city: 'Lviv',
            street: 'Marko Vovchok',
            house: 45,
            flat: 45
        },
        parents: [
            'Igor',
            'Nina',
        ],
        rating: 4,
        studying: ['python', 'java', 'css']
    },
    {
        name: 'Alexsandr', age: 34, gender: 'male', address: {
            city: 'Lviv',
            street: 'Kitayska',
            house: 10,
            flat: 5
        },
        parents: [
            'Petro',
            'Alina',
        ],
        rating: 2,
        studying: ['js', 'java', 'html']
    },
    {
        name: 'Sergii', age: 12, gender: 'male',
        parents: [
            'Anton',
            'Tamara',
        ],
        rating: 4,
        studying: ['node', 'java', 'css', 'mongo', 'mysql']
    },
    {
        name: 'Igor', age: 45, gender: 'male', address: {
            city: 'Kyiv',
            street: 'Shevchenko',
            house: 100,
            flat: 66
        },
        parents: [
            'Igor',
            'Igor',
        ],
        rating: 5,
        studying: ['java', 'node']
    },
    {
        name: 'Eva', age: 26, gender: 'female', address: {
            city: 'Odessa',
            street: 'Derebasovska',
            house: 4,
        },
        parents: [
            'Masha'
        ],
        rating: 2,
        studying: ['js']
    },
    {
        name: 'Kira', age: 49, gender: 'female', address: {
            city: 'Uzgorod',
            street: 'Doroshenka',
            house: 201,
            flat: 1
        },
        parents: [
            'Vitaliy',
            'Olha',
        ],
        rating: 2,
        studying: ['java']
    },
    {
        name: 'Vova', age: 16, gender: 'male', address: {
            city: 'Uzgorod',
            street: 'Bethoven',
            house: 2,
            flat: 145
        },
        rating: 3
    }

])

// or find
db.users.find({
    $or: [
        {rating: 2},
        {rating: 3}
    ]
})

//in find
db.users.find({
    age: {
        $in: [34, 26, 29, 17]
    }
})

//not in find
db.users.find({
    age: {
        $not: {
            $in: [34, 26, 29, 17]
        }
    }
})


// less or greater find
db.users.find({age: {$gt: 40}})
db.users.find({age: {$lt: 20}})
db.users.find({age: {$gte: 30}})
db.users.find({age: {$lte: 30}})

//regexp find
db.users.find({name: /^N/})

//reverse sort
db.users.find().sort({rating: -1}).limit(4).skip(2)

//set or update value
db.users.updateOne(
    {_id: ObjectId('649d5a70785a0e385331d5fd')},
    {$set: {rating: 3}}
    )

//unset or update value
db.users.updateOne(
    {_id: ObjectId('649d5a70785a0e385331d5fd')},
    {$unset: {rating: true}}
    )

db.users.find(
    {_id: ObjectId('649d5a70785a0e385331d5fd')},
    )

//arrays
db.users.find({parents: {$exists: 0}})

//finding by size of array
db.users.find({studying: {$size: 2}})

//push to arr
db.users.updateOne(
    {_id: ObjectId("649d5a70785a0e385331d5fc")},
    {$push: {studying: 'mongoDB'}}
    )

db.users.find({_id: ObjectId("649d5a70785a0e385331d5fc")})

//remove from arr
db.users.updateOne(
    {_id: ObjectId("649d5a70785a0e385331d5fc")},
    {$pull: {studying: 'mongoDB'}}
    )

//delete obj
db.users.deleteOne('_id')
db.users.deleteMany('_id')


//-----------------------------------------------------hw1-----------------------------------------------------------------------------

// 1) Знайти всіх юзерів в кого вік менше за 20
db.users.find({age: {$lt: 20}})

db.users.find()

// 2) Знайти всіх юзерів в котрих хоча б один з батьків Tamara або Petro
db.users.find({
    $or: [
        {parents: 'Tamara'},
        {parents: 'Petro'}
    ]
})

// 3) Знайти всіх юзерів які вивчають js
db.users.find({studying: 'js'})

// 4) Знайти всіх юзерів котрі вивчають тільки один предмет и додати їм java

db.users.find(
    {studying: {$size: 1}},
    )

db.users.updateMany(
    {studying: {$size: 1}},
    {$push: {studying: 'java'}}
    )


// 5) Знайти всіх юзерів номера будинків яких знаходяться в межах 1-20
db.users.find(
    {
        'address.house':
            {$lt: 20},

    })

db.users.find()

// 6) Знайти всіх юзерів в яких назва вулиці містить пробіл
db.users.find(
    {'address.street': /^.* .*$/}
    )

// 7) Видалити всіх юзерів в котрих немає поля studying

db.users.deleteMany(
    {studying: null}
    )

db.users.find()
// 8) Знайти всіх юзерів в котрих в ім'я когось с батьків закінчується на 'na'
db.users.find({'parents': /^.*na$/})

// 9) Всім юзерам котрі не вивчають python додати його
db.users.aggregate([
    {
        $group: {_id: '$studying'}
    }
])

db.users.updateMany(
    {studying: {$exists: 1}},
    {$addToSet: {studying: 'python'}}
    )

// 10) Посортувати юзерів по рейтингу та по номеру квартири (що то що то, від більшого меншого)
db.users.find().sort({rating: -1}).sort({'address.flat': -1})


// ----------------------------------------------------hw2----------------------------------------------------------------------
db.students.find()
db.students.insertMany(
    [
        {
            "name": "Bob", "class": 7, "lessons": ["english", "mathematics"], "avgScore": 3.5, "parents": [
                {"gender": "female", "name": "Ira"},
                {"gender": "male", "name": "Dima", "profession": "programmer"}
            ]
        },
        {
            "name": "Alice", "class": 7, "lessons": ["english", "mathematics", 'geology'], "avgScore": 5, "parents": [
                {"gender": "female", "name": "Katya", "profession": "doctor"},
                {"gender": "male", "name": "Andrii", "profession": "doctor"}
            ]
        },
        {"name": "Viktor", "class": 7, "lessons": ["german", "informatics"], "avgScore": 4.1},
        {"name": "Dima", "class": 7, "lessons": ["german", "mathematics", "physics"], "avgScore": 3.5},
        {
            "name": "Katerina", "class": 1, "lessons": ["basic"], "avgScore": 4, "parents": [
                {"gender": "male", "name": "Igor", "profession": "scientist"}
            ]
        },
        {
            "name": "Ivanka", "class": 1, "lessons": ["basic"], "avgScore": 4.91, "parents": [
                {"gender": "female", "name": "Nadya", "profession": "teacher"},
                {"gender": "male", "name": "Oleg", "profession": "sailor"}
            ]
        },
        {
            "name": "Oleguk", "class": 1, "lessons": ["basic"], "avgScore": 4.2, "parents": [
                {"gender": "female", "name": "Katya", "profession": "journalist"},
                {"gender": "male", "name": "Miroslav", "profession": "photographer"}
            ]
        },
        {
            "name": "Igorko", "class": 1, "lessons": ["basic"], "avgScore": 2.61, "parents": [
                {"gender": "male", "name": "Vitalik", "profession": "builder"},
            ]
        },
        {
            "name": "Katya", "class": 1, "lessons": ["basic"], "avgScore": 3.92, "parents": [
                {"gender": "female", "name": "Solomiya", "profession": "architect"},
                {"gender": "male", "name": "Andriy", "profession": "driver"}
            ]
        },
        {
            "name": "Viktor", "class": 1, "lessons": ["basic"], "avgScore": 3.54, "parents": [
                {"gender": "male", "name": "Oleksandr", "profession": "soldier"},
                {"gender": "female", "name": "Svitlana", "profession": "soldier"}
            ]
        },
        {
            "name": "Ivan", "class": 2, "lessons": ["basic"], "avgScore": 4.2, "parents": [
                {"gender": "male", "name": "Ivan", "profession": "trainer"},
                {"gender": "female", "name": "Vika"}
            ]
        },
        {
            "name": "Artem", "class": 2, "lessons": ["how to be a star"], "avgScore": 3.9, "parents": [
                {"gender": "female", "name": "Albert", "profession": "star"},
            ]
        },
        {
            "name": "Kostya", "class": 2, "lessons": ["basic"], "avgScore": 4.24, "parents": [
                {"gender": "male", "name": "Ivan", "profession": "blogger"},
                {"gender": "male", "name": "Andriy", "profession": "blogger"}
            ]
        },
        {
            "name": "Inna", "class": 2, "lessons": ["basic"], "avgScore": 3.11, "parents": [
                {"gender": "male", "name": "Adam", "profession": "musician"},
                {"gender": "female", "name": "Diana"}
            ]
        },
        {
            "name": "Ivan", "class": 3, "lessons": ["basic"], "avgScore": 4.9, "parents": [
                {"gender": "male", "name": "Vlad", "profession": "merchandiser"},
                {"gender": "female", "name": "Galina", "profession": "teacher"}
            ]
        },
        {
            "name": "Galina", "class": 3, "lessons": ["basic"], "avgScore": 3.8, "parents": [
                {"gender": "male", "name": "Johny", "profession": "doctor"},
                {"gender": "female", "name": "Sasha", "profession": "porn star"}
            ]
        },
        {
            "name": "Dima", "class": 3, "lessons": ["basic"], "avgScore": 3.5, "parents": [
                {"gender": "male", "name": "Dima", "profession": "trainer"},
                {"gender": "female", "name": "Olga", "profession": "sportsman"}
            ]
        },
        {
            "name": "Nastya", "class": 4, "lessons": ["informatics", "physics"], "avgScore": 4.1, "parents": [
                {"gender": "male", "name": "Viktor", "profession": "programmer"},
                {"gender": "female", "name": "Karina", "profession": "doctor"}
            ]
        },
        {
            "name": "Murka", "class": 4, "lessons": ["physics"], "avgScore": 2.7, "parents": [
                {"gender": "female", "name": "Inessa", "profession": "writer"}
            ]
        },
        {
            "name": "Vasyl", "class": 4, "lessons": ["english"], "avgScore": 4.93, "parents": [
                {"gender": "female", "name": "Solomiya", "profession": "architect"},
                {"gender": "male", "name": "Andriy", "profession": "driver"}
            ]
        },
        {
            "name": "Feliks", "class": 4, "lessons": ["physics"], "avgScore": 2.12, "parents": [
                {"gender": "female", "name": "Tanya", "profession": "designer"},
                {"gender": "male", "name": "Andriy", "profession": "writer"}
            ]
        },
        {
            "name": "Katerina", "class": 4, "lessons": ["geology"], "avgScore": 4.51, "parents": [
                {"gender": "female", "name": "Ivanka", "profession": "architect"},
            ]
        },
        {
            "name": "Konstantin",
            "class": 4,
            "lessons": ["english", "informatics", "geology"],
            "avgScore": 2.31,
            "parents": [
                {"gender": "female", "name": "Natylya", "profession": "HR"},
                {"gender": "male", "name": "Andriy", "profession": "economist"}
            ]
        },
        {
            "name": "Illya", "class": 4, "lessons": ["basic"], "avgScore": 2.78, "parents": [
                {"gender": "female", "name": "Irina", "profession": "waitress"},
                {"gender": "female", "name": "Olga", "profession": "chief financial officer"}
            ]
        },
        {
            "name": "Roman", "class": 4, "lessons": ["basic"], "avgScore": 5, "parents": [
                {"gender": "male", "name": "Igor", "profession": "programmer"},
                {"gender": "female", "name": "Oksana", "profession": "scientist"}
            ]
        },
        {
            "name": "Petro", "class": 4, "lessons": ["basic"], "avgScore": 4.8, "parents": [
                {"gender": "male", "name": "Dima", "profession": "builder"},
                {"gender": "female", "name": "Inna", "profession": "seamstress"}
            ]
        }
    ]
    );


db.teacher.insertMany(
    [
        {"name": "Mariya Ivanivna", "class_curator": 7, "lesson": "english", "payment": 2000},
        {"name": "Sergey Viktorovich", "class_curator": 9, "lesson": "informatics", "payment": 3200},
        {"name": "Ivan Borisovich", "class_curator": 6, "lesson": "mathematics", "payment": 2500},
        {"name": "Tetyna Visilivna", "class_curator": 5, "lesson": "french", "payment": 2000},
        {"name": "Oksana Olegivna", "class_curator": 8, "lesson": "physics", "payment": 4000},
        {"name": "Ostap Miroslavovich", "class_curator": 4, "lesson": "geology", "payment": 2500},
        {"name": "Dmitro Igorovich", "class_curator": 3, "lesson": "basic", "payment": 2200},
        {"name": "Mikhailo Denisovick", "class_curator": 2, "lesson": "basic", "payment": 2300},
        {"name": "Diana Viktorivna", "class_curator": 1, "lesson": "basic", "payment": 2100}
    ]
    );

db.students.find()
//
// 1) Знайти всіх дітей в яких сердня оцінка 4.2
db.students.find({avgScore: 4.2})

// 2) Знайди всіх дітей з 1 класу
db.students.find({class: 1})

// 3) Знайти всіх дітей які вивчають фізику

db.students.find({lessons: 'physics'})

// 4) Знайти всіх дітей, батьки яких працюють в науці ( scientist )

db.students.find({'parents.profession': 'scientist'})

// 5) Знайти дітей, в яких середня оцінка більша за 4
db.students.find({avgScore: {$gt: 4}})

// 6) Знайти найкращого учня

db.students.find().sort({avgScore: -1}).limit(1)

// 7) Знайти найгіршого учня
db.students.find().sort({avgScore: 1}).limit(1)

// 8) Знайти топ 3 учнів
db.students.find().sort({avgScore: -1}).limit(3)

// 9) Знайти середній бал по школі
db.students.aggregate([
    {
        $group: {
            _id: '$avgScore'
        }
    },
    {
        $addFields: {
            avgOverall: {$sum: '$avgScore'}
        }
    }
])

// 10) Знайти середній бал дітей які вивчають математику або фізику
db.students.aggregate([
    {
        $match: {
            $or: [
                {lessons: 'mathematics'},
                {lessons: 'physics'}
            ]
        }
    },
    {
        $group:{
            _id:'$avgScore'
        }

    }
])


db.students.find({lessons: 'mathematics'})

// 11) Знайти середній бал по 2 класі
db.students.aggregate([
    {
        $match: {class: 2}
    },
    {
        $group: {
            _id: '$_id',
            avg: {$avg: '$avgScore'}
        }
    },
    {
        $sort: {avg: -1}
    }

])
// 12) Знайти дітей з не повною сім'єю
db.students.find({parents: {$size: 1}})

// 13) Знайти батьків які не працюють
db.students.aggregate([
    {
        $unwind: '$parents'
    },
    {
        $match: {'parents.profession': null}
    }
])

// 14) Вигнати дітей, які мають середній бал менше ніж 2.5

db.students.deleteMany({avgScore: {$lt: 2.5}})
db.students.find({avgScore: {$lt: 2.5}})

// 15) Дітям, батьки яких працюють в освіті ( teacher ) поставити 5
db.students.updateMany(
    {'parents.profession': 'teacher'},
    {$set: {avgScore: 5}}
    )

db.students.find({'parents.profession': 'teacher'}, {avg: '$avgScore'})
// 16) Знайти дітей які вчаться в початковій школі (до 5 класу) і вивчають фізику ( physics )
db.students.aggregate([
    {
        $match: {
            class: {$lt: 5},
            lessons: 'physics'
        }
    }
])

// 17) Знайти найуспішніший клас
db.students.aggregate([
    {
        $group: {
            _id: '$class',
            avgClassScore: {$avg: '$avgScore'}
        }
    },
    {
        $sort: {
            avgClassScore: -1
        }
    },
    {
        $addFields: {
            classNumber: '$_id'
        }
    },
    {
        $limit: 1
    },
    {
        $project: {
            _id: 0
        }
    }
])